{"version":3,"sources":["components/Header.js","components/Transaction.js","components/Search.js","components/Summary.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","title","className","Transaction","tx","hash","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","Summary","transation","height","time","TRANSATION_API_URL","initialState","loading","TRANSTION","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","a","fetch","response","json","jsonResponse","console","log","Response","Error","transList","length","splice","map","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.89316567.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = (props) => {\n  const {title} = props\n  return (\n    <header className=\"App-header\">\n        <h2>{title}</h2>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react'\n\nconst DEFAULT_PLACEHOLDER_IMAGE = 'https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg'\n\nconst Transaction = ({ tx }) => {\n  return (\n    <div className=\"trans-view\">\n      <h2>{tx.hash}</h2>\n    </div>\n  )\n}\n\nexport default Transaction","import React, { useState } from 'react'\n\nconst Search = (props) => {\n  const [searchValue, setSearchValue] = useState('')\n\n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value)\n  }\n\n  const resetInputField = () => {\n    setSearchValue('')\n  }\n\n  const callSearchFunction = (e) => {\n    e.preventDefault()\n    props.search(searchValue)\n    resetInputField()\n  }\n\n  return (\n    <form className=\"search\">\n      <input\n        value={searchValue}\n        onChange={handleSearchInputChanges}\n        type=\"text\"\n      />\n      <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n    </form>\n  )\n}\n\nexport default Search","import React from 'react'\n\nconst Summary = (props) => {\n  const {transation} = props\n  function add0(m){\n    return m<10?'0'+m:m \n  }\n  function format(shijianchuo)\n  {\n  //shijianchuo是整数，否则要parseInt转换\n    var time = new Date(shijianchuo);\n    var y = time.getFullYear();\n    var m = time.getMonth()+1;\n    var d = time.getDate();\n    var h = time.getHours();\n    var mm = time.getMinutes();\n    var s = time.getSeconds();\n    return y+'-'+add0(m)+'-'+add0(d)+' '+add0(h)+':'+add0(mm)+':'+add0(s);\n  }\n  return (\n    <div>\n      {\n      transation && \n      <>\n        <div className=\"kiseLw\">\n          <p>\n            Hash\n          </p>\n           <p>\n            {transation.hash}\n           </p>\n        </div>\n        <div className=\"kiseLw\">\n          <p>\n            Confirmations\n          </p>\n           <p>\n            {transation.hash}\n           </p>\n        </div>\n        <div className=\"kiseLw\">\n          <p>\n            Height\n          </p>\n           <p>\n            {transation.height}\n           </p>\n        </div>\n        <div className=\"kiseLw\">\n          <p>\n            Timestamp\n          </p>\n           <p>\n            {transation.time}\n           </p>\n        </div>\n      </>\n      }\n    </div>\n  )\n}\nexport default Summary","import React, { useReducer, useEffect } from 'react';\nimport '../App.css';\nimport Header from './Header'\nimport Transtion from './Transaction'\nimport Search from './Search'\nimport Summary from './Summary'\n\nconst TRANSATION_API_URL = 'https://blockchain.info/rawblock/'\n\nconst initialState = {\n  loading: true,\n  TRANSTION: [],\n  errorMessage: null\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_TRANSTION_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      }\n    case 'SEARCH_TRANSTION_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        transation: action.payload\n      }\n    case 'SEARCH_TRANSTION_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      }\n    default:\n      return state\n  }\n}\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(`${TRANSATION_API_URL}00000000000000000007878ec04bb2b2e12317804810f4c26033585b3f81ffaa`)\n      const jsonResponse = await response.json()\n      console.log(jsonResponse, \"jsonResponse\")\n      dispatch({\n        type: 'SEARCH_TRANSTION_SUCCESS',\n        payload: jsonResponse\n      })\n    })()\n  }, [])\n\n  const search = async searchValue => {\n    dispatch({\n      type: 'SEARCH_TRANSTION_REQUEST'\n    })\n\n    const response = await fetch(`${TRANSATION_API_URL}${searchValue}`)\n    const jsonResponse = await response.json()\n    if (jsonResponse.Response === 'True') {\n      dispatch({\n        type: 'SEARCH_TRANSTION_SUCCESS',\n        payload: jsonResponse.Search\n      })\n    } else {\n      dispatch({\n        type: 'SEARCH_TRANSTION_FAILURE',\n        error: jsonResponse.Error\n      })\n    }\n  }\n\n  const { transation, errorMessage, loading } = state\n  let transList = [] \n  if(transation && transation.tx.length > 4){\n    transList = transation.tx.splice(0, 4)\n  }\n  console.log(transation, \"这是多少\")\n  return (\n    <div className=\"App\">\n      <Header title=\"Blockchain.com\"/>\n      <Search search={search} />\n      <Summary transation={transation} />\n      <div className=\"transtion\">\n        {loading && !errorMessage ? (\n          <span>loading...</span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          transList && transList.map((tx, index) => (\n            <Transtion key={`${index}`} tx={tx} />\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}